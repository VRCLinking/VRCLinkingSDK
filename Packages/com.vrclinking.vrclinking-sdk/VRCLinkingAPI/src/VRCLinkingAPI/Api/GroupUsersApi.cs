/*
 * VRCLinking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRCLinkingAPI.Client;
using VRCLinkingAPI.Model;

namespace VRCLinkingAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>GroupLinkedRole</returns>
        GroupLinkedRole CreateGroupRole(string guildId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of GroupLinkedRole</returns>
        ApiResponse<GroupLinkedRole> CreateGroupRoleWithHttpInfo(string guildId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <returns></returns>
        void DeleteGroupRole(string guildId, string roleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupRoleWithHttpInfo(string guildId, string roleId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>GetGroupRolesResponse</returns>
        GetGroupRolesResponse GetGroupRoles(string guildId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of GetGroupRolesResponse</returns>
        ApiResponse<GetGroupRolesResponse> GetGroupRolesWithHttpInfo(string guildId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <returns></returns>
        void UpdateGroupRole(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupRoleWithHttpInfo(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupLinkedRole</returns>
        System.Threading.Tasks.Task<GroupLinkedRole> CreateGroupRoleAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupLinkedRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupLinkedRole>> CreateGroupRoleWithHttpInfoAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupRoleAsync(string guildId, string roleId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupRoleWithHttpInfoAsync(string guildId, string roleId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupRolesResponse</returns>
        System.Threading.Tasks.Task<GetGroupRolesResponse> GetGroupRolesAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroupRolesResponse>> GetGroupRolesWithHttpInfoAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupRoleAsync(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupRoleWithHttpInfoAsync(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupUsersApi : IGroupUsersApiSync, IGroupUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupUsersApi : IDisposable, IGroupUsersApi
    {
        private VRCLinkingAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupUsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GroupUsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupUsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GroupUsersApi(string basePath)
        {
            this.Configuration = VRCLinkingAPI.Client.Configuration.MergeConfigurations(
                VRCLinkingAPI.Client.GlobalConfiguration.Instance,
                new VRCLinkingAPI.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VRCLinkingAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VRCLinkingAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupUsersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GroupUsersApi(VRCLinkingAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRCLinkingAPI.Client.Configuration.MergeConfigurations(
                VRCLinkingAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VRCLinkingAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VRCLinkingAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupUsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GroupUsersApi(VRCLinkingAPI.Client.ISynchronousClient client, VRCLinkingAPI.Client.IAsynchronousClient asyncClient, VRCLinkingAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRCLinkingAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public VRCLinkingAPI.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRCLinkingAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRCLinkingAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRCLinkingAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRCLinkingAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>GroupLinkedRole</returns>
        public GroupLinkedRole CreateGroupRole(string guildId)
        {
            VRCLinkingAPI.Client.ApiResponse<GroupLinkedRole> localVarResponse = CreateGroupRoleWithHttpInfo(guildId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of GroupLinkedRole</returns>
        public VRCLinkingAPI.Client.ApiResponse<GroupLinkedRole> CreateGroupRoleWithHttpInfo(string guildId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->CreateGroupRole");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GroupLinkedRole>("/groups/{guildId}/group_roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupLinkedRole</returns>
        public async System.Threading.Tasks.Task<GroupLinkedRole> CreateGroupRoleAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = CreateGroupRoleWithHttpInfoAsync(guildId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<GroupLinkedRole> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<GroupLinkedRole> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupLinkedRole)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<GroupLinkedRole>> CreateGroupRoleWithHttpInfoAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->CreateGroupRole");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<GroupLinkedRole>("/groups/{guildId}/group_roles", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroupRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <returns></returns>
        public void DeleteGroupRole(string guildId, string roleId)
        {
            DeleteGroupRoleWithHttpInfo(guildId, roleId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRCLinkingAPI.Client.ApiResponse<Object> DeleteGroupRoleWithHttpInfo(string guildId, string roleId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->DeleteGroupRole");

            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'roleId' when calling GroupUsersApi->DeleteGroupRole");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{guildId}/group_roles/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupRoleAsync(string guildId, string roleId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = DeleteGroupRoleWithHttpInfoAsync(guildId, roleId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="roleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<Object>> DeleteGroupRoleWithHttpInfoAsync(string guildId, string roleId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->DeleteGroupRole");

            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'roleId' when calling GroupUsersApi->DeleteGroupRole");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("roleId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(roleId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<Object>("/groups/{guildId}/group_roles/{roleId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>GetGroupRolesResponse</returns>
        public GetGroupRolesResponse GetGroupRoles(string guildId)
        {
            VRCLinkingAPI.Client.ApiResponse<GetGroupRolesResponse> localVarResponse = GetGroupRolesWithHttpInfo(guildId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of GetGroupRolesResponse</returns>
        public VRCLinkingAPI.Client.ApiResponse<GetGroupRolesResponse> GetGroupRolesWithHttpInfo(string guildId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->GetGroupRoles");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetGroupRolesResponse>("/groups/{guildId}/group_roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupRolesResponse</returns>
        public async System.Threading.Tasks.Task<GetGroupRolesResponse> GetGroupRolesAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetGroupRolesWithHttpInfoAsync(guildId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<GetGroupRolesResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<GetGroupRolesResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupRolesResponse)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<GetGroupRolesResponse>> GetGroupRolesWithHttpInfoAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->GetGroupRoles");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetGroupRolesResponse>("/groups/{guildId}/group_roles", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void UpdateGroupRole(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest))
        {
            UpdateGroupRoleWithHttpInfo(guildId, updateGroupRoleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRCLinkingAPI.Client.ApiResponse<Object> UpdateGroupRoleWithHttpInfo(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->UpdateGroupRole");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.Data = updateGroupRoleRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{guildId}/group_roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupRoleAsync(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = UpdateGroupRoleWithHttpInfoAsync(guildId, updateGroupRoleRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="updateGroupRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<Object>> UpdateGroupRoleWithHttpInfoAsync(string guildId, UpdateGroupRoleRequest updateGroupRoleRequest = default(UpdateGroupRoleRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling GroupUsersApi->UpdateGroupRole");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.Data = updateGroupRoleRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/groups/{guildId}/group_roles", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
