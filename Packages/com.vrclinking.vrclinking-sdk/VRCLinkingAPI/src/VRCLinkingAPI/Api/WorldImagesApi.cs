/*
 * VRCLinking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRCLinkingAPI.Client;
using VRCLinkingAPI.Model;

namespace VRCLinkingAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorldImagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <returns></returns>
        void BatchUpdateImageSlots(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BatchUpdateImageSlotsWithHttpInfo(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>ImageSlotDto</returns>
        ImageSlotDto CreateImageSlot(string guildId, Guid worldId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of ImageSlotDto</returns>
        ApiResponse<ImageSlotDto> CreateImageSlotWithHttpInfo(string guildId, Guid worldId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns></returns>
        void DeleteImage(string guildId, Guid imageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteImageWithHttpInfo(string guildId, Guid imageId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <returns></returns>
        void DeleteImageSlot(string guildId, Guid worldId, Guid slotId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteImageSlotWithHttpInfo(string guildId, Guid worldId, Guid slotId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImage(string guildId, Guid imageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageWithHttpInfo(string guildId, Guid imageId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>GetServerSlotsResponse</returns>
        GetServerSlotsResponse GetImageSlots(string guildId, Guid worldId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of GetServerSlotsResponse</returns>
        ApiResponse<GetServerSlotsResponse> GetImageSlotsWithHttpInfo(string guildId, Guid worldId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>GetServerImagesResponse</returns>
        GetServerImagesResponse GetServerImages(string guildId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of GetServerImagesResponse</returns>
        ApiResponse<GetServerImagesResponse> GetServerImagesWithHttpInfo(string guildId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetSlotImage(Guid worldId, Guid slotId, string guildId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetSlotImageWithHttpInfo(Guid worldId, Guid slotId, string guildId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <returns>ImageSlotDto</returns>
        ImageSlotDto UpdateImageSlot(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <returns>ApiResponse of ImageSlotDto</returns>
        ApiResponse<ImageSlotDto> UpdateImageSlotWithHttpInfo(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        void UploadImage(string guildId, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadImageWithHttpInfo(string guildId, System.IO.Stream file = default(System.IO.Stream));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorldImagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BatchUpdateImageSlotsAsync(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BatchUpdateImageSlotsWithHttpInfoAsync(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageSlotDto</returns>
        System.Threading.Tasks.Task<ImageSlotDto> CreateImageSlotAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageSlotDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageSlotDto>> CreateImageSlotWithHttpInfoAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteImageAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteImageWithHttpInfoAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteImageSlotAsync(string guildId, Guid worldId, Guid slotId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteImageSlotWithHttpInfoAsync(string guildId, Guid worldId, Guid slotId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageWithHttpInfoAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServerSlotsResponse</returns>
        System.Threading.Tasks.Task<GetServerSlotsResponse> GetImageSlotsAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServerSlotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServerSlotsResponse>> GetImageSlotsWithHttpInfoAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServerImagesResponse</returns>
        System.Threading.Tasks.Task<GetServerImagesResponse> GetServerImagesAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServerImagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServerImagesResponse>> GetServerImagesWithHttpInfoAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetSlotImageAsync(Guid worldId, Guid slotId, string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSlotImageWithHttpInfoAsync(Guid worldId, Guid slotId, string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageSlotDto</returns>
        System.Threading.Tasks.Task<ImageSlotDto> UpdateImageSlotAsync(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageSlotDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageSlotDto>> UpdateImageSlotWithHttpInfoAsync(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadImageAsync(string guildId, System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadImageWithHttpInfoAsync(string guildId, System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorldImagesApi : IWorldImagesApiSync, IWorldImagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorldImagesApi : IDisposable, IWorldImagesApi
    {
        private VRCLinkingAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldImagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public WorldImagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldImagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public WorldImagesApi(string basePath)
        {
            this.Configuration = VRCLinkingAPI.Client.Configuration.MergeConfigurations(
                VRCLinkingAPI.Client.GlobalConfiguration.Instance,
                new VRCLinkingAPI.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VRCLinkingAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VRCLinkingAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldImagesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public WorldImagesApi(VRCLinkingAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRCLinkingAPI.Client.Configuration.MergeConfigurations(
                VRCLinkingAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VRCLinkingAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VRCLinkingAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldImagesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public WorldImagesApi(VRCLinkingAPI.Client.ISynchronousClient client, VRCLinkingAPI.Client.IAsynchronousClient asyncClient, VRCLinkingAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRCLinkingAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public VRCLinkingAPI.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRCLinkingAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRCLinkingAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRCLinkingAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRCLinkingAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <returns></returns>
        public void BatchUpdateImageSlots(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest))
        {
            BatchUpdateImageSlotsWithHttpInfo(guildId, worldId, batchUpdateImageSlotsRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRCLinkingAPI.Client.ApiResponse<Object> BatchUpdateImageSlotsWithHttpInfo(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->BatchUpdateImageSlots");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.Data = batchUpdateImageSlotsRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/world_images/{guildId}/{worldId}/slots/batch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateImageSlots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BatchUpdateImageSlotsAsync(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = BatchUpdateImageSlotsWithHttpInfoAsync(guildId, worldId, batchUpdateImageSlotsRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="batchUpdateImageSlotsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<Object>> BatchUpdateImageSlotsWithHttpInfoAsync(string guildId, Guid worldId, BatchUpdateImageSlotsRequest batchUpdateImageSlotsRequest = default(BatchUpdateImageSlotsRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->BatchUpdateImageSlots");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.Data = batchUpdateImageSlotsRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/world_images/{guildId}/{worldId}/slots/batch", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateImageSlots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>ImageSlotDto</returns>
        public ImageSlotDto CreateImageSlot(string guildId, Guid worldId)
        {
            VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> localVarResponse = CreateImageSlotWithHttpInfo(guildId, worldId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of ImageSlotDto</returns>
        public VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> CreateImageSlotWithHttpInfo(string guildId, Guid worldId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->CreateImageSlot");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ImageSlotDto>("/world_images/{guildId}/{worldId}/slots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImageSlot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageSlotDto</returns>
        public async System.Threading.Tasks.Task<ImageSlotDto> CreateImageSlotAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = CreateImageSlotWithHttpInfoAsync(guildId, worldId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageSlotDto)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<ImageSlotDto>> CreateImageSlotWithHttpInfoAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->CreateImageSlot");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<ImageSlotDto>("/world_images/{guildId}/{worldId}/slots", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImageSlot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns></returns>
        public void DeleteImage(string guildId, Guid imageId)
        {
            DeleteImageWithHttpInfo(guildId, imageId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRCLinkingAPI.Client.ApiResponse<Object> DeleteImageWithHttpInfo(string guildId, Guid imageId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->DeleteImage");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/world_images/{guildId}/image/{imageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteImageAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = DeleteImageWithHttpInfoAsync(guildId, imageId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<Object>> DeleteImageWithHttpInfoAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->DeleteImage");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<Object>("/world_images/{guildId}/image/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <returns></returns>
        public void DeleteImageSlot(string guildId, Guid worldId, Guid slotId)
        {
            DeleteImageSlotWithHttpInfo(guildId, worldId, slotId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRCLinkingAPI.Client.ApiResponse<Object> DeleteImageSlotWithHttpInfo(string guildId, Guid worldId, Guid slotId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->DeleteImageSlot");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(slotId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/world_images/{guildId}/{worldId}/{slotId}/slots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImageSlot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteImageSlotAsync(string guildId, Guid worldId, Guid slotId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = DeleteImageSlotWithHttpInfoAsync(guildId, worldId, slotId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<Object>> DeleteImageSlotWithHttpInfoAsync(string guildId, Guid worldId, Guid slotId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->DeleteImageSlot");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(slotId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<Object>("/world_images/{guildId}/{worldId}/{slotId}/slots", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImageSlot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImage(string guildId, Guid imageId)
        {
            VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> localVarResponse = GetImageWithHttpInfo(guildId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> GetImageWithHttpInfo(string guildId, Guid imageId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetImage");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/world_images/{guildId}/image/{imageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetImageWithHttpInfoAsync(guildId, imageId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<System.IO.Stream>> GetImageWithHttpInfoAsync(string guildId, Guid imageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetImage");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<System.IO.Stream>("/world_images/{guildId}/image/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>GetServerSlotsResponse</returns>
        public GetServerSlotsResponse GetImageSlots(string guildId, Guid worldId)
        {
            VRCLinkingAPI.Client.ApiResponse<GetServerSlotsResponse> localVarResponse = GetImageSlotsWithHttpInfo(guildId, worldId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <returns>ApiResponse of GetServerSlotsResponse</returns>
        public VRCLinkingAPI.Client.ApiResponse<GetServerSlotsResponse> GetImageSlotsWithHttpInfo(string guildId, Guid worldId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetImageSlots");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetServerSlotsResponse>("/world_images/{guildId}/{worldId}/slots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageSlots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServerSlotsResponse</returns>
        public async System.Threading.Tasks.Task<GetServerSlotsResponse> GetImageSlotsAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetImageSlotsWithHttpInfoAsync(guildId, worldId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<GetServerSlotsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<GetServerSlotsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServerSlotsResponse)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<GetServerSlotsResponse>> GetImageSlotsWithHttpInfoAsync(string guildId, Guid worldId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetImageSlots");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetServerSlotsResponse>("/world_images/{guildId}/{worldId}/slots", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageSlots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>GetServerImagesResponse</returns>
        public GetServerImagesResponse GetServerImages(string guildId)
        {
            VRCLinkingAPI.Client.ApiResponse<GetServerImagesResponse> localVarResponse = GetServerImagesWithHttpInfo(guildId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of GetServerImagesResponse</returns>
        public VRCLinkingAPI.Client.ApiResponse<GetServerImagesResponse> GetServerImagesWithHttpInfo(string guildId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetServerImages");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetServerImagesResponse>("/world_images/{guildId}/images", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerImages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServerImagesResponse</returns>
        public async System.Threading.Tasks.Task<GetServerImagesResponse> GetServerImagesAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetServerImagesWithHttpInfoAsync(guildId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<GetServerImagesResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<GetServerImagesResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServerImagesResponse)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<GetServerImagesResponse>> GetServerImagesWithHttpInfoAsync(string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetServerImages");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetServerImagesResponse>("/world_images/{guildId}/images", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServerImages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetSlotImage(Guid worldId, Guid slotId, string guildId)
        {
            VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> localVarResponse = GetSlotImageWithHttpInfo(worldId, slotId, guildId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> GetSlotImageWithHttpInfo(Guid worldId, Guid slotId, string guildId)
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetSlotImage");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/world_images/slot_image/{guildId}/{worldId}/{slotId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlotImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetSlotImageAsync(Guid worldId, Guid slotId, string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetSlotImageWithHttpInfoAsync(worldId, slotId, guildId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<System.IO.Stream> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="guildId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<System.IO.Stream>> GetSlotImageWithHttpInfoAsync(Guid worldId, Guid slotId, string guildId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->GetSlotImage");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<System.IO.Stream>("/world_images/slot_image/{guildId}/{worldId}/{slotId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlotImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <returns>ImageSlotDto</returns>
        public ImageSlotDto UpdateImageSlot(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest))
        {
            VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> localVarResponse = UpdateImageSlotWithHttpInfo(guildId, worldId, slotId, setImageSlotRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <returns>ApiResponse of ImageSlotDto</returns>
        public VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> UpdateImageSlotWithHttpInfo(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->UpdateImageSlot");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.Data = setImageSlotRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageSlotDto>("/world_images/{guildId}/{worldId}/{slotId}/slots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateImageSlot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageSlotDto</returns>
        public async System.Threading.Tasks.Task<ImageSlotDto> UpdateImageSlotAsync(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = UpdateImageSlotWithHttpInfoAsync(guildId, worldId, slotId, setImageSlotRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> localVarResponse = await task.ConfigureAwait(false);
#else
            VRCLinkingAPI.Client.ApiResponse<ImageSlotDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="worldId"></param>
        /// <param name="slotId"></param>
        /// <param name="setImageSlotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageSlotDto)</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<ImageSlotDto>> UpdateImageSlotWithHttpInfoAsync(string guildId, Guid worldId, Guid slotId, SetImageSlotRequest setImageSlotRequest = default(SetImageSlotRequest), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->UpdateImageSlot");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            localVarRequestOptions.PathParameters.Add("worldId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(worldId)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(slotId)); // path parameter
            localVarRequestOptions.Data = setImageSlotRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ImageSlotDto>("/world_images/{guildId}/{worldId}/{slotId}/slots", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateImageSlot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        public void UploadImage(string guildId, System.IO.Stream file = default(System.IO.Stream))
        {
            UploadImageWithHttpInfo(guildId, file);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VRCLinkingAPI.Client.ApiResponse<Object> UploadImageWithHttpInfo(string guildId, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->UploadImage");

            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            if (file != null)
            {
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/world_images/{guildId}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadImageAsync(string guildId, System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = UploadImageWithHttpInfoAsync(guildId, file, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VRCLinkingAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guildId"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VRCLinkingAPI.Client.ApiResponse<Object>> UploadImageWithHttpInfoAsync(string guildId, System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'guildId' is set
            if (guildId == null)
                throw new VRCLinkingAPI.Client.ApiException(400, "Missing required parameter 'guildId' when calling WorldImagesApi->UploadImage");


            VRCLinkingAPI.Client.RequestOptions localVarRequestOptions = new VRCLinkingAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VRCLinkingAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VRCLinkingAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("guildId", VRCLinkingAPI.Client.ClientUtils.ParameterToString(guildId)); // path parameter
            if (file != null)
            {
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/world_images/{guildId}/upload", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
