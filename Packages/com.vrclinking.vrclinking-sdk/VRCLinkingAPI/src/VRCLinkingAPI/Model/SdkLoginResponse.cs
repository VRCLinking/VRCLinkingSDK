/*
 * VRCLinking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = VRCLinkingAPI.Client.OpenAPIDateConverter;

namespace VRCLinkingAPI.Model
{
    /// <summary>
    /// SdkLoginResponse
    /// </summary>
    [DataContract(Name = "SdkLoginResponse")]
    public partial class SdkLoginResponse
    {

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name = "rank", IsRequired = true, EmitDefaultValue = true)]
        public UserRank Rank { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public TokenAuthStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SdkLoginResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SdkLoginResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SdkLoginResponse" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="username">username.</param>
        /// <param name="avatar">avatar.</param>
        /// <param name="globalName">globalName.</param>
        /// <param name="rank">rank (required).</param>
        /// <param name="token">token.</param>
        /// <param name="status">status (required).</param>
        public SdkLoginResponse(string id = default(string), string username = default(string), string avatar = default(string), string globalName = default(string), UserRank rank = default(UserRank), string token = default(string), TokenAuthStatus status = default(TokenAuthStatus))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SdkLoginResponse and cannot be null");
            }
            this.Id = id;
            this.Rank = rank;
            this.Status = status;
            this.Username = username;
            this.Avatar = avatar;
            this.GlobalName = globalName;
            this.Token = token;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name = "avatar", EmitDefaultValue = true)]
        public string Avatar { get; set; }

        /// <summary>
        /// Gets or Sets GlobalName
        /// </summary>
        [DataMember(Name = "globalName", EmitDefaultValue = true)]
        public string GlobalName { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SdkLoginResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  GlobalName: ").Append(GlobalName).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
