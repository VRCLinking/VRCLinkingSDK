/*
 * VRCLinking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = VRCLinkingAPI.Client.OpenAPIDateConverter;

namespace VRCLinkingAPI.Model
{
    /// <summary>
    /// UpdateWorldSettingsRequest
    /// </summary>
    [DataContract(Name = "UpdateWorldSettingsRequest")]
    public partial class UpdateWorldSettingsRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWorldSettingsRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="customData">customData.</param>
        /// <param name="compression">compression.</param>
        /// <param name="encryption">encryption.</param>
        /// <param name="jsonMode">jsonMode.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="includeDiscordData">includeDiscordData.</param>
        /// <param name="includeGroupData">includeGroupData.</param>
        public UpdateWorldSettingsRequest(string name = default(string), string customData = default(string), bool? compression = default(bool?), bool? encryption = default(bool?), bool? jsonMode = default(bool?), bool? enabled = default(bool?), bool? includeDiscordData = default(bool?), bool? includeGroupData = default(bool?))
        {
            this.Name = name;
            this.CustomData = customData;
            this.Compression = compression;
            this.Encryption = encryption;
            this.JsonMode = jsonMode;
            this.Enabled = enabled;
            this.IncludeDiscordData = includeDiscordData;
            this.IncludeGroupData = includeGroupData;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name = "customData", EmitDefaultValue = true)]
        public string CustomData { get; set; }

        /// <summary>
        /// Gets or Sets Compression
        /// </summary>
        [DataMember(Name = "compression", EmitDefaultValue = true)]
        public bool? Compression { get; set; }

        /// <summary>
        /// Gets or Sets Encryption
        /// </summary>
        [DataMember(Name = "encryption", EmitDefaultValue = true)]
        public bool? Encryption { get; set; }

        /// <summary>
        /// Gets or Sets JsonMode
        /// </summary>
        [DataMember(Name = "jsonMode", EmitDefaultValue = true)]
        public bool? JsonMode { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IncludeDiscordData
        /// </summary>
        [DataMember(Name = "includeDiscordData", EmitDefaultValue = true)]
        public bool? IncludeDiscordData { get; set; }

        /// <summary>
        /// Gets or Sets IncludeGroupData
        /// </summary>
        [DataMember(Name = "includeGroupData", EmitDefaultValue = true)]
        public bool? IncludeGroupData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateWorldSettingsRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  Compression: ").Append(Compression).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  JsonMode: ").Append(JsonMode).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IncludeDiscordData: ").Append(IncludeDiscordData).Append("\n");
            sb.Append("  IncludeGroupData: ").Append(IncludeGroupData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
