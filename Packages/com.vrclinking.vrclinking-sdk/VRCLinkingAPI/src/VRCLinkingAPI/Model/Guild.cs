/*
 * VRCLinking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = VRCLinkingAPI.Client.OpenAPIDateConverter;

namespace VRCLinkingAPI.Model
{
    /// <summary>
    /// Guild
    /// </summary>
    [DataContract(Name = "Guild")]
    public partial class Guild
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Guild" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Guild() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Guild" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="icon">icon.</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="guestEnabled">guestEnabled (required).</param>
        /// <param name="grpEnabled">grpEnabled (required).</param>
        /// <param name="grpId">grpId.</param>
        /// <param name="encRoleList">encRoleList (required).</param>
        /// <param name="alwaysEncRoles">alwaysEncRoles (required).</param>
        /// <param name="members">members (required).</param>
        /// <param name="linkedMembers">linkedMembers (required).</param>
        /// <param name="roles">roles (required).</param>
        /// <param name="autoAssignRoles">autoAssignRoles (required).</param>
        public Guild(string id = default(string), string name = default(string), string icon = default(string), string owner = default(string), bool guestEnabled = default(bool), bool grpEnabled = default(bool), string grpId = default(string), List<EncodeRole> encRoleList = default(List<EncodeRole>), List<EncodeRole> alwaysEncRoles = default(List<EncodeRole>), int members = default(int), int linkedMembers = default(int), List<DiscordRoleDto> roles = default(List<DiscordRoleDto>), AutoAssignRoles autoAssignRoles = default(AutoAssignRoles))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Guild and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Guild and cannot be null");
            }
            this.Name = name;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for Guild and cannot be null");
            }
            this.Owner = owner;
            this.GuestEnabled = guestEnabled;
            this.GrpEnabled = grpEnabled;
            // to ensure "encRoleList" is required (not null)
            if (encRoleList == null)
            {
                throw new ArgumentNullException("encRoleList is a required property for Guild and cannot be null");
            }
            this.EncRoleList = encRoleList;
            // to ensure "alwaysEncRoles" is required (not null)
            if (alwaysEncRoles == null)
            {
                throw new ArgumentNullException("alwaysEncRoles is a required property for Guild and cannot be null");
            }
            this.AlwaysEncRoles = alwaysEncRoles;
            this.Members = members;
            this.LinkedMembers = linkedMembers;
            // to ensure "roles" is required (not null)
            if (roles == null)
            {
                throw new ArgumentNullException("roles is a required property for Guild and cannot be null");
            }
            this.Roles = roles;
            // to ensure "autoAssignRoles" is required (not null)
            if (autoAssignRoles == null)
            {
                throw new ArgumentNullException("autoAssignRoles is a required property for Guild and cannot be null");
            }
            this.AutoAssignRoles = autoAssignRoles;
            this.Icon = icon;
            this.GrpId = grpId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets GuestEnabled
        /// </summary>
        [DataMember(Name = "guestEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool GuestEnabled { get; set; }

        /// <summary>
        /// Gets or Sets GrpEnabled
        /// </summary>
        [DataMember(Name = "grpEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool GrpEnabled { get; set; }

        /// <summary>
        /// Gets or Sets GrpId
        /// </summary>
        [DataMember(Name = "grpId", EmitDefaultValue = true)]
        public string GrpId { get; set; }

        /// <summary>
        /// Gets or Sets EncRoleList
        /// </summary>
        [DataMember(Name = "encRoleList", IsRequired = true, EmitDefaultValue = true)]
        public List<EncodeRole> EncRoleList { get; set; }

        /// <summary>
        /// Gets or Sets AlwaysEncRoles
        /// </summary>
        [DataMember(Name = "alwaysEncRoles", IsRequired = true, EmitDefaultValue = true)]
        public List<EncodeRole> AlwaysEncRoles { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name = "members", IsRequired = true, EmitDefaultValue = true)]
        public int Members { get; set; }

        /// <summary>
        /// Gets or Sets LinkedMembers
        /// </summary>
        [DataMember(Name = "linkedMembers", IsRequired = true, EmitDefaultValue = true)]
        public int LinkedMembers { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", IsRequired = true, EmitDefaultValue = true)]
        public List<DiscordRoleDto> Roles { get; set; }

        /// <summary>
        /// Gets or Sets AutoAssignRoles
        /// </summary>
        [DataMember(Name = "autoAssignRoles", IsRequired = true, EmitDefaultValue = true)]
        public AutoAssignRoles AutoAssignRoles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Guild {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  GuestEnabled: ").Append(GuestEnabled).Append("\n");
            sb.Append("  GrpEnabled: ").Append(GrpEnabled).Append("\n");
            sb.Append("  GrpId: ").Append(GrpId).Append("\n");
            sb.Append("  EncRoleList: ").Append(EncRoleList).Append("\n");
            sb.Append("  AlwaysEncRoles: ").Append(AlwaysEncRoles).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  LinkedMembers: ").Append(LinkedMembers).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  AutoAssignRoles: ").Append(AutoAssignRoles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
