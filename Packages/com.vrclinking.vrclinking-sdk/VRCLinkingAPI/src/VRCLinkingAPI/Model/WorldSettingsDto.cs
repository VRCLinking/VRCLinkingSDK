/*
 * VRCLinking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = VRCLinkingAPI.Client.OpenAPIDateConverter;

namespace VRCLinkingAPI.Model
{
    /// <summary>
    /// WorldSettingsDto
    /// </summary>
    [DataContract(Name = "WorldSettingsDto")]
    public partial class WorldSettingsDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorldSettingsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorldSettingsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorldSettingsDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="requestCount">requestCount (required).</param>
        /// <param name="guildId">guildId (required).</param>
        /// <param name="customData">customData.</param>
        /// <param name="compression">compression (required).</param>
        /// <param name="encryption">encryption (required).</param>
        /// <param name="jsonMode">jsonMode (required).</param>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="includeDiscordData">includeDiscordData (required).</param>
        /// <param name="includeGroupData">includeGroupData (required).</param>
        /// <param name="discordEncodeRoles">discordEncodeRoles (required).</param>
        /// <param name="discordAlwaysEncodeRoles">discordAlwaysEncodeRoles (required).</param>
        /// <param name="groupEncodeRoles">groupEncodeRoles (required).</param>
        /// <param name="groupAlwaysEncodeRoles">groupAlwaysEncodeRoles (required).</param>
        public WorldSettingsDto(Guid id = default(Guid), string name = default(string), string requestCount = default(string), string guildId = default(string), string customData = default(string), bool compression = default(bool), bool encryption = default(bool), bool jsonMode = default(bool), bool enabled = default(bool), bool includeDiscordData = default(bool), bool includeGroupData = default(bool), List<DiscordEncodeRoleDto> discordEncodeRoles = default(List<DiscordEncodeRoleDto>), List<DiscordEncodeRoleDto> discordAlwaysEncodeRoles = default(List<DiscordEncodeRoleDto>), List<GroupEncodeRoleDto> groupEncodeRoles = default(List<GroupEncodeRoleDto>), List<GroupEncodeRoleDto> groupAlwaysEncodeRoles = default(List<GroupEncodeRoleDto>))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WorldSettingsDto and cannot be null");
            }
            this.Name = name;
            // to ensure "requestCount" is required (not null)
            if (requestCount == null)
            {
                throw new ArgumentNullException("requestCount is a required property for WorldSettingsDto and cannot be null");
            }
            this.RequestCount = requestCount;
            // to ensure "guildId" is required (not null)
            if (guildId == null)
            {
                throw new ArgumentNullException("guildId is a required property for WorldSettingsDto and cannot be null");
            }
            this.GuildId = guildId;
            this.Compression = compression;
            this.Encryption = encryption;
            this.JsonMode = jsonMode;
            this.Enabled = enabled;
            this.IncludeDiscordData = includeDiscordData;
            this.IncludeGroupData = includeGroupData;
            // to ensure "discordEncodeRoles" is required (not null)
            if (discordEncodeRoles == null)
            {
                throw new ArgumentNullException("discordEncodeRoles is a required property for WorldSettingsDto and cannot be null");
            }
            this.DiscordEncodeRoles = discordEncodeRoles;
            // to ensure "discordAlwaysEncodeRoles" is required (not null)
            if (discordAlwaysEncodeRoles == null)
            {
                throw new ArgumentNullException("discordAlwaysEncodeRoles is a required property for WorldSettingsDto and cannot be null");
            }
            this.DiscordAlwaysEncodeRoles = discordAlwaysEncodeRoles;
            // to ensure "groupEncodeRoles" is required (not null)
            if (groupEncodeRoles == null)
            {
                throw new ArgumentNullException("groupEncodeRoles is a required property for WorldSettingsDto and cannot be null");
            }
            this.GroupEncodeRoles = groupEncodeRoles;
            // to ensure "groupAlwaysEncodeRoles" is required (not null)
            if (groupAlwaysEncodeRoles == null)
            {
                throw new ArgumentNullException("groupAlwaysEncodeRoles is a required property for WorldSettingsDto and cannot be null");
            }
            this.GroupAlwaysEncodeRoles = groupAlwaysEncodeRoles;
            this.CustomData = customData;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RequestCount
        /// </summary>
        [DataMember(Name = "requestCount", IsRequired = true, EmitDefaultValue = true)]
        public string RequestCount { get; set; }

        /// <summary>
        /// Gets or Sets GuildId
        /// </summary>
        [DataMember(Name = "guildId", IsRequired = true, EmitDefaultValue = true)]
        public string GuildId { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name = "customData", EmitDefaultValue = true)]
        public string CustomData { get; set; }

        /// <summary>
        /// Gets or Sets Compression
        /// </summary>
        [DataMember(Name = "compression", IsRequired = true, EmitDefaultValue = true)]
        public bool Compression { get; set; }

        /// <summary>
        /// Gets or Sets Encryption
        /// </summary>
        [DataMember(Name = "encryption", IsRequired = true, EmitDefaultValue = true)]
        public bool Encryption { get; set; }

        /// <summary>
        /// Gets or Sets JsonMode
        /// </summary>
        [DataMember(Name = "jsonMode", IsRequired = true, EmitDefaultValue = true)]
        public bool JsonMode { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IncludeDiscordData
        /// </summary>
        [DataMember(Name = "includeDiscordData", IsRequired = true, EmitDefaultValue = true)]
        public bool IncludeDiscordData { get; set; }

        /// <summary>
        /// Gets or Sets IncludeGroupData
        /// </summary>
        [DataMember(Name = "includeGroupData", IsRequired = true, EmitDefaultValue = true)]
        public bool IncludeGroupData { get; set; }

        /// <summary>
        /// Gets or Sets DiscordEncodeRoles
        /// </summary>
        [DataMember(Name = "discordEncodeRoles", IsRequired = true, EmitDefaultValue = true)]
        public List<DiscordEncodeRoleDto> DiscordEncodeRoles { get; set; }

        /// <summary>
        /// Gets or Sets DiscordAlwaysEncodeRoles
        /// </summary>
        [DataMember(Name = "discordAlwaysEncodeRoles", IsRequired = true, EmitDefaultValue = true)]
        public List<DiscordEncodeRoleDto> DiscordAlwaysEncodeRoles { get; set; }

        /// <summary>
        /// Gets or Sets GroupEncodeRoles
        /// </summary>
        [DataMember(Name = "groupEncodeRoles", IsRequired = true, EmitDefaultValue = true)]
        public List<GroupEncodeRoleDto> GroupEncodeRoles { get; set; }

        /// <summary>
        /// Gets or Sets GroupAlwaysEncodeRoles
        /// </summary>
        [DataMember(Name = "groupAlwaysEncodeRoles", IsRequired = true, EmitDefaultValue = true)]
        public List<GroupEncodeRoleDto> GroupAlwaysEncodeRoles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorldSettingsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequestCount: ").Append(RequestCount).Append("\n");
            sb.Append("  GuildId: ").Append(GuildId).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  Compression: ").Append(Compression).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  JsonMode: ").Append(JsonMode).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IncludeDiscordData: ").Append(IncludeDiscordData).Append("\n");
            sb.Append("  IncludeGroupData: ").Append(IncludeGroupData).Append("\n");
            sb.Append("  DiscordEncodeRoles: ").Append(DiscordEncodeRoles).Append("\n");
            sb.Append("  DiscordAlwaysEncodeRoles: ").Append(DiscordAlwaysEncodeRoles).Append("\n");
            sb.Append("  GroupEncodeRoles: ").Append(GroupEncodeRoles).Append("\n");
            sb.Append("  GroupAlwaysEncodeRoles: ").Append(GroupAlwaysEncodeRoles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
