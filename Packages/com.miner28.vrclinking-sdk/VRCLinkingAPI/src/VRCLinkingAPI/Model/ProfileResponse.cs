/*
 * VRCLinking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = VRCLinkingAPI.Client.OpenAPIDateConverter;

namespace VRCLinkingAPI.Model
{
    /// <summary>
    /// ProfileResponse
    /// </summary>
    [DataContract(Name = "ProfileResponse")]
    public partial class ProfileResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResponse" /> class.
        /// </summary>
        /// <param name="user">user (required).</param>
        /// <param name="linkData">linkData (required).</param>
        /// <param name="groups">groups (required).</param>
        /// <param name="guilds">guilds (required).</param>
        public ProfileResponse(User user = default(User), LinkData linkData = default(LinkData), List<LimitedGroup> groups = default(List<LimitedGroup>), List<LimitedGuild> guilds = default(List<LimitedGuild>))
        {
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for ProfileResponse and cannot be null");
            }
            this.User = user;
            // to ensure "linkData" is required (not null)
            if (linkData == null)
            {
                throw new ArgumentNullException("linkData is a required property for ProfileResponse and cannot be null");
            }
            this.LinkData = linkData;
            // to ensure "groups" is required (not null)
            if (groups == null)
            {
                throw new ArgumentNullException("groups is a required property for ProfileResponse and cannot be null");
            }
            this.Groups = groups;
            // to ensure "guilds" is required (not null)
            if (guilds == null)
            {
                throw new ArgumentNullException("guilds is a required property for ProfileResponse and cannot be null");
            }
            this.Guilds = guilds;
        }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets LinkData
        /// </summary>
        [DataMember(Name = "linkData", IsRequired = true, EmitDefaultValue = true)]
        public LinkData LinkData { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", IsRequired = true, EmitDefaultValue = true)]
        public List<LimitedGroup> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Guilds
        /// </summary>
        [DataMember(Name = "guilds", IsRequired = true, EmitDefaultValue = true)]
        public List<LimitedGuild> Guilds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileResponse {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  LinkData: ").Append(LinkData).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Guilds: ").Append(Guilds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
